version: "3"

services:
  wwr_nginx:
    container_name: wwr_nginx
    build:
      context: .
      dockerfile: .docker/nginx.dockerfile
    volumes:
      - ./frontend:/var/www/
    ports:
      - "${NGINX_EXTERNAL_PORT}:80"
    restart: unless-stopped
    networks:
      - wwr-network

  wwr_backend:
    container_name: wwr_backend
    depends_on:
      wwr_postgres:
        condition: service_healthy
    volumes:
      - ./backend:/var/www/
    working_dir: /var/www/
    build:
      context: .
      dockerfile: ./.docker/backend.dockerfile
    networks:
      - wwr-network

  wwr_frontend:
    container_name: wwr_frontend
    volumes:
      - ./frontend:/var/www/
    working_dir: /var/www/
    build:
      context: .
      dockerfile: ./.docker/frontend.dockerfile
    networks:
      - wwr-network

  wwr_postgres:
    container_name: wwr_postgres
    image: postgres:${POSTGRES_VERSION}
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./.docker/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - wwr-network

  wwr_adminer:
    container_name: wwr_adminer
    image: adminer
    restart: always
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      - wwr-network

networks:
  wwr-network:
    driver: bridge
